class Container:
    def __init__(self, nomor, tujuan):
        self.nomor = nomor
        self.tujuan = tujuan
        self.status = "belum diproses"  # Status default
        self.next = None
        self.prev = None
    
    def set_status(self, status):
        if status not in ["belum diproses", "sedang diproses", "sudah diproses"]:
            print("Status tidak valid!")
            return
        self.status = status

# SINGLE LINKED LIST (SLL)
class SingleLinkedList:
    def __init__(self):
        self.head = None
    
    def enqueue(self, nomor, tujuan):
        # Validasi apakah tujuan hanya berisi huruf atau karakter
        if not tujuan.isalpha():
            print("Tujuan pengiriman hanya boleh mengandung huruf!")
            return
        
        new_container = Container(nomor, tujuan)
        if not self.head:
            self.head = new_container
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_container
    
    def dequeue(self, nomor=None):
        if not self.head:
            print("Antrian kosong!")
            return
        if nomor:
            temp = self.head
            prev = None
            while temp:
                if temp.nomor == nomor:
                    if prev:
                        prev.next = temp.next
                    else:
                        self.head = temp.next
                    print(f"Kontainer {nomor} berhasil dihapus.")  # Tambahkan pesan ini
                    return
                prev = temp
                temp = temp.next
            print(f"Kontainer dengan nomor {nomor} tidak ditemukan!")  # Jika tidak ditemukan
        else:
            print(f"Menghapus kontainer {self.head.nomor}")  # Tambahkan pesan ini
            self.head = self.head.next

    def display(self):
        temp = self.head
        while temp:
            print(f"[{temp.nomor} - {temp.tujuan} - {temp.status}] -> ", end="")
            temp = temp.next
        print("None")
    
    def length(self):
        temp = self.head
        count = 0
        while temp:
            count += 1
            temp = temp.next
        return count


# DOUBLY LINKED LIST (DLL)
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
    
    def enqueue(self, nomor, tujuan):
        # Validasi apakah tujuan hanya berisi huruf atau karakter
        if not tujuan.isalpha():
            print("Tujuan pengiriman hanya boleh mengandung huruf!")
            return
        
        new_container = Container(nomor, tujuan)
        if not self.head:
            self.head = new_container
            self.tail = new_container
        else:
            temp = self.tail
            temp.next = new_container
            new_container.prev = temp
            self.tail = new_container
    
    def dequeue(self, nomor=None):
        if not self.head:
            print("Antrian kosong!")
            return
        
        if nomor:
            temp = self.head
            while temp:
                if temp.nomor == nomor:
                    if temp.prev:
                        temp.prev.next = temp.next
                    else:
                        self.head = temp.next
                    if temp.next:
                        temp.next.prev = temp.prev
                    else:
                        self.tail = temp.prev
                    print(f"Kontainer {nomor} berhasil dihapus.")  # Tambahkan pesan ini
                    return
                temp = temp.next
            print(f"Kontainer dengan nomor {nomor} tidak ditemukan!")  # Jika tidak ditemukan
        else:
            print(f"Menghapus kontainer {self.head.nomor}")  # Tambahkan pesan ini
            if self.head == self.tail:
                self.head = self.tail = None
            else:
                self.head = self.head.next
                self.head.prev = None

    def display_forward(self):
        temp = self.head
        if not temp:
            print("Antrean kosong!")
            return
        print("Daftar Kontainer (Maju):")
        while temp:
            print(f"[{temp.nomor} - {temp.tujuan} - {temp.status}] <-> ", end="")
            temp = temp.next
        print("None")
    
    def display_backward(self):
        temp = self.tail
        if not temp:
            print("Antrean kosong!")
            return
        print("Daftar Kontainer (Mundur):")
        while temp:
            print(f"[{temp.nomor} - {temp.tujuan} - {temp.status}] <-> ", end="")
            temp = temp.prev
        print("None")
    
    def length(self):
        temp = self.head
        count = 0
        while temp:
            count += 1
            temp = temp.next
        return count
    
# CIRCULAR LINKED LIST (CLL)
class CircularLinkedList:
    def __init__(self):
        self.head = None
    
    def enqueue(self, nomor, tujuan):
        # Validasi apakah tujuan hanya berisi huruf atau karakter
        if not tujuan.isalpha():
            print("Tujuan pengiriman hanya boleh mengandung huruf!")
            return
        
        new_container = Container(nomor, tujuan)
        if not self.head:
            self.head = new_container
            self.head.next = self.head  # Tail menunjuk kembali ke head
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_container
            new_container.next = self.head
    
    def dequeue(self, nomor=None):
        if not self.head:
            print("Antrian kosong!")
            return
        if nomor:
            temp = self.head
            prev = None
            while True:
                if temp.nomor == nomor:
                    if prev:
                        prev.next = temp.next
                    else:
                        if temp.next == self.head:
                            self.head = None
                        else:
                            self.head = temp.next
                            temp = self.head
                    print(f"Kontainer {nomor} berhasil dihapus.")  # Tambahkan pesan ini
                    return
                prev = temp
                temp = temp.next
                if temp == self.head:
                    break
            print(f"Kontainer dengan nomor {nomor} tidak ditemukan!")  # Jika tidak ditemukan
        else:
            print(f"Menghapus kontainer {self.head.nomor}")  # Tambahkan pesan ini
            if self.head.next == self.head:
                self.head = None
            else:
                temp = self.head
                while temp.next != self.head:
                    temp = temp.next
                temp.next = self.head.next
                self.head = self.head.next

    def display(self):
        if not self.head:
            print("Antrean kosong!")
            return
        temp = self.head
        while True:
            print(f"[{temp.nomor} - {temp.tujuan} - {temp.status}] -> ", end="")
            temp = temp.next
            if temp == self.head:
                break
        print("(kembali ke awal)")
    
    def length(self):
        if not self.head:
            return 0
        temp = self.head
        count = 0
        while True:
            count += 1
            temp = temp.next
            if temp == self.head:  # Sudah kembali ke head
                break
        return count

# MENU PROGRAM
def main():
    while True:
        print("\nPilih tipe antrean:")
        print("1. Single Linked List")
        print("2. Doubly Linked List")
        print("3. Circular Linked List")
        print("4. Keluar")
        choice = input("Masukkan pilihan: ")
        
        if choice == '1':
            queue = SingleLinkedList()
        elif choice == '2':
            queue = DoublyLinkedList()
        elif choice == '3':
            queue = CircularLinkedList()
        elif choice == '4':
            break
        else:
            print("Pilihan tidak valid!")
            continue
        
        while True:
            print("\nMenu:")
            print("1. Tambah Kontainer")
            print("2. Hapus Kontainer")
            print("3. Tampilkan Antrean Maju")
            print("4. Tampilkan Antrean Mundur (khusus Doubly Linked List)")
            print("5. Panjang Antrean")
            print("6. Update Status Kontainer")
            print("7. Kembali ke menu utama")
            sub_choice = input("Masukkan pilihan: ")
            
            if sub_choice == '1':
                nomor = input("Masukkan nomor kontainer: ")
                tujuan = input("Masukkan tujuan pengiriman: ")
                # Validasi: Nomor kontainer harus mengandung huruf atau kombinasi huruf & angka, tidak boleh hanya angka negatif
                if nomor.isdigit() and nomor.startswith('-'):
                    print("Nomor kontainer tidak boleh angka negatif!")
                elif not any(char.isalpha() for char in nomor):  
                    print("Nomor kontainer harus mengandung setidaknya satu huruf!")
                elif not tujuan.isalpha():
                    print("Tujuan pengiriman hanya boleh mengandung huruf!")
                else:
                    queue.enqueue(nomor, tujuan)
            elif sub_choice == '2':
                nomor = input("Masukkan nomor kontainer untuk dihapus (biarkan kosong untuk hapus yang pertama): ")
                # Memastikan nomor kontainer tidak negatif dan hanya berisi angka
                if nomor and nomor.startswith('-'):
                    print("Nomor kontainer tidak boleh negatif!")
                else:
                    queue.dequeue(nomor if nomor else None)
            elif sub_choice == '3':
                if isinstance(queue, DoublyLinkedList):
                    queue.display_forward()
                else:
                    queue.display()
            elif sub_choice == '4' and isinstance(queue, DoublyLinkedList):
                queue.display_backward()
            elif sub_choice == '5':
                print(f"Panjang antrean: {queue.length()}")
            elif sub_choice == '6':
                nomor = input("Masukkan nomor kontainer untuk update status: ")
                status = input("Masukkan status baru (belum diproses, sedang diproses, sudah diproses): ")
                # Update status kontainer
                temp = queue.head
                while temp:
                    if temp.nomor == nomor:
                        temp.set_status(status)
                        print(f"Status kontainer {nomor} diubah menjadi {status}.")
                        break
                    temp = temp.next
                else:
                    print(f"Kontainer dengan nomor {nomor} tidak ditem ukan!")
            elif sub_choice == '7':
                break
            else:
                print("Pilihan tidak valid atau fitur tidak tersedia untuk tipe antrean ini!")

if __name__ == "__main__":
    main()
